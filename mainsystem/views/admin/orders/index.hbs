<div class="flex flex-col h-screen bg-gray-100">
    <div class="flex">
        <aside class="w-64 bg-white shadow-md h-full">
            {{> aside }}
        </aside>
        <main class="flex-1 overflow-y-auto p-6 bg-gray-100">
            <div class="text-center mb-6">
                <div class="bg-white text-black border border-black rounded-xl shadow-md p-6">
                    <h1 class="text-4xl font-extrabold tracking-tight">
                        Order List
                    </h1>
                    <p class="text-black mt-2 text-lg mb-0">
                        View and manage your recent orders effortlessly
                    </p>
                </div>
            </div>

            <div class="bg-white shadow rounded-lg">
                <table class="table-auto w-full text-left border-collapse border border-gray-300">
                    <thead class="bg-gray-100">
                        <tr>
                            <th class="px-4 py-2 border border-gray-300 text-center">User ID</th>
                            <th class="px-4 py-2 border border-gray-300 text-center">Date</th>
                            <th class="px-4 py-2 border border-gray-300 text-center">Total Amount</th>
                            <th class="px-4 py-2 border border-gray-300 text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="orders-container" class="divide-y divide-gray-200">
                        {{#each orders}}
                        <tr>
                            <td class="px-4 py-2 border border-gray-300">{{this.user_id}}</td>
                            <td class="px-4 py-2 border border-gray-300">{{this.date}}</td>
                            <td class="px-4 py-2 border border-gray-300 text-center">${{this.total_amount}}</td>
                            <td class="px-4 py-2 border border-gray-300">
                                <div class="flex justify-center items-center space-x-2">
                                    <form class="mb-0">
                                        <button id="viewOrder" type="button"
                                            class="bg-indigo-600 text-white px-2 py-2 rounded-lg shadow-md hover:bg-indigo-700">
                                            <i class="fas fa-pencil-alt"></i>
                                        </button>
                                    </form>
                                </div>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>
            <div id="pagination-container" class="flex justify-center mt-4"></div>
        </main>
    </div>
    <div>
        {{> footer }}
    </div>
</div>

<script>
    // Fetch orders and render them dynamically
    async function fetchAndRenderOrders(url) {
        const ordersContainer = document.getElementById('orders-container');
        const paginationContainer = document.getElementById('pagination-container');

        ordersContainer.innerHTML = '<tr><td colspan="4" class="text-center text-gray-600">Loading...</td></tr>';
        paginationContainer.innerHTML = '';

        try {
            const response = await fetch(url);
            const data = await response.json();

            ordersContainer.innerHTML = '';

            if (response.ok && data.Orders && data.Orders.length > 0) {
                data.Orders.forEach(order => {
                    const orderRow = document.createElement('tr');
                    orderRow.innerHTML = `
                        <td class="px-4 py-2 border border-gray-300">${order.user_id}</td>
                        <td class="px-4 py-2 border border-gray-300">${order.date}</td>
                        <td class="px-4 py-2 border border-gray-300 text-center">${order.total_amount}</td>
                        <td class="px-4 py-2 border border-gray-300">
                            <div class="flex justify-center items-center space-x-2">
                                <form class="mb-0">
                                    <button data-id="2" type="button" 
                                        class="bg-indigo-600 text-white px-2 py-2 rounded-lg shadow-md hover:bg-indigo-700">
                                        <i class="fas fa-pencil-alt"></i>
                                    </button>
                                </form>
                            </div>
                        </td>
                    `;
                    ordersContainer.appendChild(orderRow);
                });

                renderPagination(data.totalPages, data.currentPage, url);
            } else {
                ordersContainer.innerHTML = '<tr><td colspan="4" class="text-center text-gray-600">No orders found.</td></tr>';
            }
        } catch (error) {
            console.error('Error fetching orders:', error);
            ordersContainer.innerHTML = '<tr><td colspan="4" class="text-center text-red-500">Failed to load orders. Please try again.</td></tr>';
        }
    }

    // Render pagination buttons
    function renderPagination(totalPages, currentPage, url) {
        const paginationContainer = document.getElementById('pagination-container');
        paginationContainer.innerHTML = '';

        for (let i = 1; i <= totalPages; i++) {
            const button = document.createElement('button');
            button.className = `bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mx-1 ${i === currentPage ? 'opacity-50 cursor-not-allowed' : ''
                }`;
            button.textContent = i;
            button.disabled = i === currentPage;

            button.addEventListener('click', () => {
                const baseUrl = url.split('?')[0];
                const queryParams = new URLSearchParams(url.split('?')[1]);
                queryParams.set('page', i);

                fetchAndRenderOrders(`${baseUrl}?${queryParams.toString()}`);
            });

            paginationContainer.appendChild(button);
        }
    }

    // On page load, fetch orders
    document.addEventListener('DOMContentLoaded', () => {
        fetchAndRenderOrders('/admin/orders/api?page=1');
    });
</script>
