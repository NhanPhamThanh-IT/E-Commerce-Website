{{> header }}
<main class="container mx-auto px-6 py-12">
    <h2 class="text-4xl font-extrabold text-center mb-12 text-gray-900">Your Cart</h2>

    <div class="flex flex-col md:flex-row space-y-8 md:space-y-0 md:space-x-12">
        <!-- Cart Section -->
        <div class="w-full md:w-1/2 bg-white p-6 rounded-lg shadow-lg transition-all hover:shadow-2xl">
            <div id="cart-summary" class="mt-6 border-b pb-6">
                <p id="cart-total" class="text-2xl font-semibold text-gray-900">Total: $0.00</p>
            </div>
            <div id="cart-container" class="space-y-6 mt-6">
                <!-- Cart items -->
            </div>
            <div id="pagination" class="mt-6 flex justify-center space-x-2">
                <!-- Pagination buttons  -->
            </div>
        </div>

        <!-- Address Form Section -->
        <div class="w-full md:w-1/2 bg-white p-6 rounded-lg shadow-lg transition-all hover:shadow-2xl">
            <h3 class="text-3xl font-semibold text-gray-900 mb-8">Enter Your Information</h3>
            <form id="address-form" class="space-y-6">
                <div>
                    <label for="phone" class="block text-lg font-medium text-gray-700">Phone Number</label>
                    <input type="tel" id="phone" name="phone"
                        class="w-full p-4 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        required value="{{user.phone}}">
                </div>

                <div>
                    <label for="address" class="block text-lg font-medium text-gray-700">Shipping Address</label>
                    <textarea id="address" name="address" rows="4"
                        class="w-full p-4 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        required>{{user.address}}</textarea>
                </div>

                <button type="submit"
                    class="bg-green-600 text-white py-3 px-6 rounded-lg hover:bg-green-800 transition w-full focus:outline-none">
                    Confirm Order
                </button>
            </form>
        </div>
    </div>
</main>
<script>
    document.getElementById('address-form').addEventListener('submit', async function (event) {
        event.preventDefault();

        const formData = {
            phone: document.getElementById('phone').value.trim(),
            address: document.getElementById('address').value.trim(),
        };

        const cartItems = getCartFromCookie();

        if (!formData.phone) {
            alert('Phone number is required.');
            return;
        }

        if (!/\(?([0-9]{3})\)?([ .-]?)([0-9]{3})\2([0-9]{4})/.test(formData.phone)) {
            alert('Please enter a valid phone number.');
            return;
        }

        if (!formData.address || formData.address.length < 10) {
            alert('Address must be at least 10 characters long.');
            return;
        }

        if (!cartItems || cartItems.length === 0) {
            alert('Your cart is empty.');
            return;
        }

        const payload = {
            customerInfo: formData,
            cart: cartItems,
        };
        console.log('Validation passed. Payload:', payload);
        alert('Validation successful! You can now proceed to checkout.');
        try {
            const response = await fetch('/checkout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload),
            });

            if (response.redirected) {
                saveCartToCookie([]);
                window.location.href = response.url;
            } else {
                const result = await response.json();
                alert('Error during checkout: ' + (result.message || 'Unknown error occurred.'));
            }
        } catch (error) {
            console.error('Error during order confirmation:', error);
            alert('An unexpected error occurred. Please try again later.');
        }
    });

    // Function to get the cart from the cookie
    function getCartFromCookie() {
        const cartCookie = document.cookie.split('; ').find(row => row.startsWith('cart='));
        if (cartCookie) {
            try {
                return JSON.parse(decodeURIComponent(cartCookie.split('=')[1]));
            } catch (error) {
                console.error('Error parsing cart cookie:', error);
                return [];
            }
        }
        return [];
    }

    // Function to save the cart to the cookie
    function saveCartToCookie(cart) {
        document.cookie = `cart=${encodeURIComponent(JSON.stringify(cart))}; path=/; max-age=31536000`;
    }

    // Function to fetch product details by ID
    async function fetchProductDetails(productId) {
        try {
            const response = await fetch(`/product/${productId}`);
            if (response.ok) {
                return await response.json();
            } else {
                console.error(`Failed to fetch product with ID ${productId}`);
                return null;
            }
        } catch (error) {
            console.error(`Error fetching product with ID ${productId}:`, error);
            return null;
        }
    }
    // Constants for pagination
    const ITEMS_PER_PAGE = 2; // Number of items per page
    let currentPage = 1; // Current page
    async function renderVisibleCartItems() {
        const cart = getCartFromCookie();
        const cartContainer = document.getElementById('cart-container');

        // Determine the items for the current page
        const start = (currentPage - 1) * ITEMS_PER_PAGE;
        const end = start + ITEMS_PER_PAGE;
        const itemsToRender = cart.slice(start, end);

        // Clear the current cart rows
        cartContainer.innerHTML = '';
        if (itemsToRender.length === 0) {
            cartContainer.innerHTML = '<img src="/system_images/emptyCart.gif" class="object-cover mx-auto w-1/2 h-1/2"><p class="text-center text-gray-600">Your cart is empty.</p>';
            return;
        }
        for (const item of itemsToRender) {
            const product = await fetchProductDetails(item.id);
            if (product) {
                const productTotal = item.price * item.quantity;

                // Create a new cart item element
                const cartItem = document.createElement('div');
                cartItem.classList.add('cart-item', 'p-4', 'border', 'border-gray-300', 'rounded-lg', 'shadow-sm');
                cartItem.setAttribute('data-product-row', item.id);
                cartItem.setAttribute('data-product-price', product.price);

                cartItem.innerHTML = `
                <div class="flex justify-between items-center">
                    <div class="flex items-center space-x-4">
                        <img src="${product.image}" alt="${product.title}" class="w-16 h-16 object-cover rounded-md">
                        <div>
                            <h3 class="text-lg font-semibold text-gray-800">${product.title}</h3>
                            ${product.brand ? `<p class="text-sm text-gray-600">${product.brand}</p>` : ''}             
                            <div><p class="text-sm line-through text-gray-500">$${product.price.toFixed(2)}</p> <!-- Original price -->
                            <p class="text-gray-800 font-bold">$${item.price}</p> <!-- Discounted price --> </div>
                        </div>
                    </div>
                    <div class="flex items-center space-x-4">
                        <input type="number" class="w-16 text-center border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                            value="${item.quantity}" min="1" data-product-id="${item.id}">
                        <button class="text-red-500 hover:text-red-700" data-product-id="${item.id}">Remove</button>
                        <p class="product-total text-gray-800 font-bold">$${productTotal.toFixed(2)}</p>
                    </div>
                </div>
            `;

                // Append the new item to the container
                cartContainer.appendChild(cartItem);

                // Optionally, trigger the fade-in effect after appending
                setTimeout(() => cartItem.classList.remove('hidden'), 10);
            }
        }

        attachCartEventListeners(); // Attach event listeners for the newly rendered items
    }


    // Function to render pagination controls
    function renderPagination(totalItems) {
        const paginationContainer = document.getElementById('pagination');
        if (totalItems === 0) {
            paginationContainer.style.display = 'none';
            return;
        }
        const totalPages = Math.ceil(totalItems / ITEMS_PER_PAGE);

        paginationContainer.innerHTML = ''; // Clear previous pagination controls

        for (let i = 1; i <= totalPages; i++) {
            const button = document.createElement('button');
            button.textContent = i;
            button.className = `px-4 py-2 rounded-lg ${i === currentPage ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-800'
                } hover:bg-blue-500 transition`;
            button.addEventListener('click', () => {
                currentPage = i;
                updateVisibleItems(); // Only update the visible items
            });
            paginationContainer.appendChild(button);
        }
    }

    // Function to update the visible items in the cart and pagination controls
    function updateVisibleItems() {
        const cartContainer = document.getElementById('cart-container');
        const paginationContainer = document.getElementById('pagination');

        // Hide the cart items and pagination during the re-render process
        cartContainer.style.display = 'none';
        paginationContainer.style.display = 'none';

        // Fade out current cart items
        const currentItems = cartContainer.querySelectorAll('.cart-item');
        currentItems.forEach(item => {
            item.classList.add('hidden');
        });

        // Wait for the fade-out animation to finish
        setTimeout(async () => {
            // Render all visible cart items
            await renderVisibleCartItems();

            // Render pagination controls
            renderPagination(getCartFromCookie().length);

            // Show the cart items and pagination after the rendering is complete
            cartContainer.style.display = 'block'; // Show the cart items
            paginationContainer.style.display = 'flex'; // Show the pagination

            // Fade in the newly rendered items all at once
            const newItems = cartContainer.querySelectorAll('.cart-item');
            newItems.forEach(item => {
                item.classList.remove('hidden');
            });
        }, 100); // Match the timeout with the fade-out duration
    }


    // Initialize the cart rendering
    (async function initializeCart() {
        await renderVisibleCartItems(); // Render the initial visible items
        renderPagination(getCartFromCookie().length); // Render the pagination controls
        updateCartTotal()
    })();


    // Function to attach event listeners
    function attachCartEventListeners() {
        document.querySelectorAll('[data-product-id]').forEach(element => {
            const productId = element.getAttribute('data-product-id');
            if (element.tagName === 'INPUT') {
                element.addEventListener('change', (e) => {
                    const newQuantity = parseInt(e.target.value, 10);
                    if (newQuantity > 0) {
                        updateCartQuantity(productId, newQuantity);
                    } else {
                        removeFromCart(productId); // Remove if quantity is set to 0
                    }
                });
            } else if (element.tagName === 'BUTTON') {
                element.addEventListener('click', () => {
                    removeFromCart(productId);
                });
            }
        });
    }

    // Function to update the quantity of an item in the cart
    function updateCartQuantity(productId, quantity) {
        const cart = getCartFromCookie();
        const item = cart.find(item => item.id === productId);
        if (item) {
            item.quantity = quantity;
            saveCartToCookie(cart);

            // Update the product's total price in the DOM
            const productRow = document.querySelector(`[data-product-row="${productId}"]`);
            if (productRow) {
                const productPrice = parseFloat(productRow.getAttribute('data-product-price'));
                productRow.querySelector('.product-total').textContent = `$${(productPrice * quantity).toFixed(2)}`;
            }

            // Update the overall cart total
            updateCartTotal();
        }
    }

    // Function to remove an item from the cart
    function removeFromCart(productId) {
        let cart = getCartFromCookie();
        cart = cart.filter(item => item.id !== productId);
        saveCartToCookie(cart);

        // Remove the product row from the DOM
        const productRow = document.querySelector(`[data-product-row="${productId}"]`);
        if (productRow) {
            productRow.remove();
        }

        // Update the overall cart total
        updateCartTotal();
        const totalItems = cart.length;
        const totalPages = Math.ceil(totalItems / ITEMS_PER_PAGE);
        if (currentPage > totalPages) {
            currentPage = totalPages;
        }

        if (totalItems === 0) {
            document.getElementById('cart-container').innerHTML = '<img src="/system_images/emptyCart.gif" class="object-cover mx-auto w-1/2 h-1/2"><p class="text-center text-gray-600">Your cart is empty.</p>';
            document.getElementById('pagination').style.display = 'none';
        } else {
            updateVisibleItems();
        }
    }

    // Update cart total from the cart stored in the cookie
    function updateCartTotal() {
        const cart = getCartFromCookie();
        let total = 0;

        // Loop through all items in the cart
        cart.forEach(item => {
            // Fetch the product price from the stored cart data
            const productPrice = item.price;

            // Calculate total based on quantity and price
            total += productPrice * item.quantity;
        });

        // Update the total in the cart display (assuming you have an element with id 'cart-total')
        document.getElementById('cart-total').textContent = `Total: $${total.toFixed(2)}`;
    }

</script>