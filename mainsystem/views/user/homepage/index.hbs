{{> header }}
<main class="container mx-auto px-6 py-10">

    <div class="flex gap-12">

        <!-- Sidebar (Filters) -->
        <div class="w-1/4">
            <!-- Category Filter -->
            <div class="mb-8">
                <label for="category-filter" class="block text-sm font-medium text-gray-700">Category</label>
                <select id="category-filter"
                    class="mt-1 block w-full pl-4 pr-10 py-3 text-base border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                    <option value="">All Categories</option>
                    {{#each categories}}
                    <option value="{{this}}">{{this}}</option>
                    {{/each}}
                </select>
            </div>

            <!-- Price Filter -->
            <div class="mb-8">
                <label for="price-filter-min" class="block text-sm font-medium text-gray-700">Filter by Price</label>
                <div class="flex space-x-4 mt-2">
                    <input id="price-filter-min" type="number" placeholder="Min Price"
                        class="w-full lg:w-1/2 pl-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                    <input id="price-filter-max" type="number" placeholder="Max Price"
                        class="w-full lg:w-1/2 pl-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                </div>
                <button id="apply-price-filter"
                    class="mt-4 bg-blue-500 text-white py-3 px-6 rounded-md hover:bg-blue-700 transition duration-300 transform hover:scale-105">
                    Apply Filter <i class="fas fa-filter"></i>
                </button>
            </div>
        </div>

        <!-- Products Grid -->
        <div class="w-3/4">
            <!-- Header -->
            <h2 class="text-4xl font-extrabold text-gray-900 mb-6 flex items-center gap-2">
                <i class="fas fa-box-open text-blue-500"></i>
                Products
            </h2>

            <!-- Products Grid -->
            <div id="products-container" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
                {{#each products}}
                <div class="w-full rounded-xl shadow-lg bg-white overflow-hidden transform transition-all hover:scale-105 hover:shadow-xl">
                    <div class="relative pb-2/3">
                        <img src="{{this.image}}" alt="{{this.title}}" class="absolute inset-0 w-full h-full object-cover rounded-t-lg">
                    </div>
                    <div class="p-6">
                        <h3 class="text-lg font-semibold text-gray-900 truncate flex items-center gap-1">
                            <i class="fas fa-tag text-gray-500"></i>
                            {{this.title}}
                        </h3>
                        <p class="text-sm text-gray-600 mb-2 truncate">{{this.brand}}</p>
                        <p class="text-lg font-bold text-gray-900 mb-4">${{this.price}}</p>
                        <button id="view-details-{{this.id}}"
                            class="bg-blue-500 text-white py-3 px-6 rounded-md hover:bg-blue-700 transition duration-300 transform hover:scale-105"
                            data-product-id="{{this.id}}">
                            View Details <i class="fas fa-eye"></i>
                        </button>
                    </div>
                </div>
                {{/each}}
            </div>

            <!-- Pagination -->
            <div id="pagination-container" class="flex justify-center items-center space-x-6 mt-8">
                <button id="prev-button"
                    class="bg-gray-500 text-white py-3 px-6 rounded-md hover:bg-gray-700 transition duration-300 transform hover:scale-105"
                    disabled>
                    Previous
                </button>
                <select id="page-dropdown"
                    class="py-3 px-6 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-300 ease-in-out transform hover:scale-105">
                </select>
                <button id="next-button"
                    class="bg-gray-500 text-white py-3 px-6 rounded-md hover:bg-gray-700 transition duration-300 transform hover:scale-105">
                    Next
                </button>
            </div>
        </div>

    </div>
</main>

<!-- Product Detail Modal -->
<div id="product-modal" class="bg-black bg-opacity-50 fixed inset-0 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg shadow-lg w-full max-w-4xl p-6 relative animate-fade-in overflow-auto max-h-[90vh]">
        <button id="close-modal"
            class="absolute top-4 right-4 text-gray-700 text-2xl hover:text-red-500 transition-colors">
            &times;
        </button>
        <div class="flex flex-col gap-6">
            <!-- Product Details -->
            <div class="w-full">
                <h2 id="product-title" class="text-2xl font-semibold mb-4 truncate"></h2>
                <img id="product-image" src="" alt="" class="w-full h-64 object-cover mb-4 rounded">
                <p id="product-description" class="text-gray-600 mb-4"></p>
                <p id="product-price" class="text-gray-800 font-bold mb-4"></p>
                <p id="product-stock" class="text-sm text-gray-600 mb-4">
                    <strong>Stock Quantity:</strong> <span class="text-gray-900" id="stock-quantity"></span>
                </p>
                <div class="flex justify-between items-center">
                    <button id="add-to-cart"
                        class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-700 transition-all duration-300 transform hover:scale-105"
                        data-product-id="{{this.id}}" data-price="{{this.price}}">
                        Add to Cart <i class="fas fa-cart-plus"></i>
                    </button>
                    <div>
                        <label for="quantity-input" class="block text-sm font-medium text-gray-700">Quantity</label>
                        <input type="number" id="quantity-input"
                            class="mt-1 block w-20 pl-3 pr-10 py-2 text-base border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                            min="1" value="1" />
                    </div>
                </div>
            </div>
            <!-- Related Products -->
            <div class="w-full">
                <h3 class="text-lg font-semibold mb-4">Related Products</h3>
                <div id="related-products" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    <!-- Related products will be dynamically added here -->
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    let currentModalProductId = null;
    // Fetch and render products
    async function fetchAndRenderProducts(url) {
        const productsContainer = document.getElementById('products-container');
        const paginationContainer = document.getElementById('pagination-container');

        productsContainer.innerHTML = '';
        paginationContainer.innerHTML = '';

        try {
            const response = await fetch(url);
            const data = await response.json();

            if (response.ok && data.products && data.products.length) {
                const currentPage = parseInt(data.currentPage, 10); // Parse currentPage as an integer
                const totalPages = data.totalPages;

                // Render products
                data.products.forEach(product => {
                    productsContainer.innerHTML += `
                    <div class="w-full rounded-lg shadow-md bg-white overflow-hidden">
                        <img src="${product.image}" alt="${product.title}" class="w-full h-48 object-cover">
                        <div class="p-4">
                            <h3 class="text-lg font-semibold text-gray-900">
                                ${product.title}
                            </h3>
                            ${product.brand ? `<p class="text-sm text-gray-600 mb-2">${product.brand}</p>` : ''}
                            <p class="text-gray-800 font-bold mb-4">$${product.price}</p>
                            <button 
                                class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-700"
                                data-product-id="${product._id}">
                                View Details
                            </button>
                        </div>
                    </div>
                `;
                });

                // Render pagination
                paginationContainer.innerHTML = `
                <button 
                    class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mx-1 ${currentPage === 1 ? 'opacity-50 cursor-not-allowed' : ''}" 
                    ${currentPage === 1 ? 'disabled' : ''} 
                    data-page="${currentPage - 1}">
                    Previous
                </button>
                <select id="pagination-dropdown" class="border border-gray-300 rounded py-2 px-4 mx-2">
                    ${Array.from({ length: totalPages }, (_, i) => `
                        <option value="${i + 1}" ${i + 1 === currentPage ? 'selected' : ''}>
                            Page ${i + 1}
                        </option>
                    `).join('')}
                </select>
                <button 
                    class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mx-1 ${currentPage === totalPages ? 'opacity-50 cursor-not-allowed' : ''}" 
                    ${currentPage === totalPages ? 'disabled' : ''} 
                    data-page="${currentPage + 1}">
                    Next
                </button>
            `;

                // Add click event listeners to pagination buttons
                paginationContainer.querySelectorAll('button').forEach(button => {
                    button.addEventListener('click', () => {
                        const selectedPage = button.getAttribute('data-page');
                        const baseUrl = url.split('?')[0];
                        const queryParams = new URLSearchParams(url.split('?')[1]);
                        queryParams.set('page', selectedPage);
                        fetchAndRenderProducts(`${baseUrl}?${queryParams.toString()}`);
                    });
                });

                const paginationDropdown = document.getElementById('pagination-dropdown');
                paginationDropdown.addEventListener('change', (e) => {
                    const selectedPage = e.target.value;
                    const baseUrl = url.split('?')[0];
                    const queryParams = new URLSearchParams(url.split('?')[1]);
                    queryParams.set('page', selectedPage);
                    fetchAndRenderProducts(`${baseUrl}?${queryParams.toString()}`);
                });

                // Add event listeners to products
                addProductEventListeners();
            } else {
                productsContainer.innerHTML = '<p class="text-center text-gray-600">No products found.</p>';
            }
        } catch (error) {
            console.error('Error fetching products:', error);
            productsContainer.innerHTML = '<p class="text-center text-red-500">Failed to load products. Please try again.</p>';
        }
    }

    // Add click events to product buttons
    function addProductEventListeners() {
        document.querySelectorAll('[data-product-id]').forEach(button => {
            button.addEventListener('click', async (e) => {
                const productElement = e.target.closest('[data-product-id]');
                if (!productElement) return;
                const productId = productElement.getAttribute('data-product-id');
                try {
                    const response = await fetch(`/product/${productId}`);
                    if (!response.ok) throw new Error('Failed to fetch product details');
                    const product = await response.json();
                    showProductModal(product);
                } catch (error) {
                    console.error('Error fetching product details:', error);
                    alert('Failed to load product details. Please try again later.');
                }
            });
        });
    }

    async function showProductModal(product) {
        const modal = document.getElementById('product-modal');
        if (currentModalProductId === product._id) {
            return;
        }
        currentModalProductId = product._id;

        // Set product details
        document.getElementById('product-title').innerText = product.title;
        document.getElementById('product-image').src = product.image;
        document.getElementById('product-description').innerText = product.description;
        document.getElementById('product-price').innerText = `$${product.price}`;
        document.getElementById('add-to-cart').setAttribute('data-product-id', product._id); // Set product ID
        document.getElementById('add-to-cart').setAttribute('data-price', product.price);
        document.getElementById("stock-quantity").innerText = product.stock_quantity;
        // Fetch related products
        const relatedProductsContainer = document.getElementById('related-products');
        //relatedProductsContainer.innerHTML = '<p class="text-center text-gray-600">Loading related products...</p>';
        try {
            const response = await fetch(`/product/category/${product.category}?limit=5`);
            const relatedProducts = await response.json();

            if (response.ok && relatedProducts.products.length > 0) {
                relatedProductsContainer.innerHTML = '';

                // Filter out the product with the same _id
                const filteredProducts = relatedProducts.products.filter(
                    (related) => related._id !== product._id
                ).slice(0, 4);

                if (filteredProducts.length > 0) {
                    filteredProducts.forEach((related) => {
                        relatedProductsContainer.innerHTML += `
                            <div 
                                class="flex items-center justify-start space-x-2 cursor-pointer hover:bg-gray-100 p-2 rounded-lg"
                                data-product-id="${related._id}">
                                <img src="${related.image}" alt="${related.title}" class="w-20 h-20 object-cover">
                                <div>
                                    <h4 class="text-sm font-semibold">${related.title}</h4>
                                    <p class="text-sm text-gray-600">$${related.price}</p>
                                </div>
                            </div>
                        `;
                    });

                    relatedProductsContainer.querySelectorAll('[data-product-id]').forEach((relatedButton) => {
                        relatedButton.addEventListener('click', async (e) => {
                            const relatedProductId = e.target.closest('[data-product-id]').getAttribute('data-product-id');
                            const productUrl = `/product/${relatedProductId}`;
                            const response = await fetch(productUrl);
                            const product = await response.json();
                            showProductModal(product);
                        });
                    });
                } else {
                    relatedProductsContainer.innerHTML = '<p>No related products found.</p>';
                }
            }
        } catch (error) {
            console.error('Error fetching related products:', error);
            relatedProductsContainer.innerHTML = '<p class="text-center text-red-500">Failed to load related products.</p>';
        }

        modal.classList.remove('hidden');
    }

    // Handle Add-to-Cart button click
    document.getElementById('add-to-cart').addEventListener('click', () => {
        event.preventDefault();
        const productId = document.getElementById('add-to-cart').getAttribute('data-product-id');
        const quantityInput = document.getElementById('quantity-input');
        const quantity = parseInt(quantityInput.value, 10);
        const price = document.getElementById('add-to-cart').getAttribute('data-price');

        if (!isNaN(quantity) && quantity > 0) {
            console.log('Adding to cart:', productId, quantity, price);
            addToCart(productId, quantity, price);
        } else {
            alert('Please enter a valid quantity.');
        }
    });

    // Add items to cart
    function addToCart(productId, quantity, price) {
        let cart = getCartFromCookie();
        const existingItem = cart.find(item => item.id === productId);

        if (existingItem) {
            existingItem.quantity += quantity;
        } else {
            cart.push({ id: productId, quantity, price });
        }

        saveCartToCookie(cart);

        const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
        alert(`You now have ${totalItems} item(s) in your cart.`);
    }

    // Helper: Get cart from cookies
    function getCartFromCookie() {
        const cart = document.cookie.split('; ').find(row => row.startsWith('cart='));
        return cart ? JSON.parse(decodeURIComponent(cart.split('=')[1])) : [];
    }

    // Helper: Save cart to cookies
    function saveCartToCookie(cart) {
        document.cookie = `cart=${encodeURIComponent(JSON.stringify(cart))}; path=/`;
    }

    // Close modal when clicking the close button
    document.getElementById('close-modal').addEventListener('click', () => {
        document.getElementById('product-modal').classList.add('hidden');
        isModalVisible = false;
    });

    // Apply category filter
    document.getElementById('category-filter').addEventListener('change', function () {
        const category = this.value;
        const minPrice = document.getElementById('price-filter-min').value || 0;
        const maxPrice = document.getElementById('price-filter-max').value || 1000000;

        const url = `/product/price?category=${category}&min=${minPrice}&max=${maxPrice}&page=1&limit=10`;
        fetchAndRenderProducts(url);
    });

    // Apply price filter
    document.getElementById('apply-price-filter').addEventListener('click', function () {
        const minPrice = document.getElementById('price-filter-min').value || 0;
        const maxPrice = document.getElementById('price-filter-max').value || 1000000;

        const category = document.getElementById('category-filter').value || '';
        const url = `/product/price?category=${category}&min=${minPrice}&max=${maxPrice}&page=1`;
        fetchAndRenderProducts(url);
    });

    // Handle search input changes
    document.getElementById('search-input').addEventListener('change', function () {
        const searchTerm = this.value.trim();
        let url = '/product/search/title=' + searchTerm + '?page=1';  // Search query for title

        if (searchTerm) {
            fetchAndRenderProducts(url);
        } else {
            fetchAndRenderProducts('/product?page=1'); // If search term is cleared, show all products
        }
    });
    // Initialize product display with default filters
    fetchAndRenderProducts('/product?page=1');
</script>