<div class="flex flex-col h-screen bg-gray-100">
    <div class="flex">
        <aside class="w-64 bg-white shadow-md h-full">
            {{> aside }}
        </aside>
        <main class="flex-1 p-6 bg-gray-100 h-full relative">
            <div id="loading"
                class="absolute inset-0 flex flex-col items-center justify-center bg-gray-100 bg-opacity-75 z-50 hidden">
                <div class="animate-spin rounded-full h-16 w-16 border-t-4 border-blue-500"></div>
                <div class="mt-4 text-center text-gray-700 font-semibold">Loading...</div>
            </div>
            <div class="text-center mb-6">
                <div
                    class="bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 text-white rounded-xl shadow-md p-6">
                    <h1 class="text-4xl font-extrabold tracking-tight">Users List</h1>
                    <p class="text-white mt-2 text-lg mb-0">
                        Explore our curated list of users tailored just for you
                    </p>
                </div>
            </div>
            <div
                class="bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-xl shadow-2xl p-8 mb-4 backdrop-blur-lg hover:rounded-xl">
                <table class="w-full text-left bg-white shadow-lg rounded-xl">
                    <thead>
                        <tr style="background-color:#f5f5f4" class="rounded-t-xl">
                            <th class="px-6 py-4 font-bold text-lg text-gray-600 text-center w-32 rounded-t-xl">Avatar
                            </th>
                            <th class="px-6 py-4 font-bold text-lg text-gray-600 text-center rounded-t-xl">Full Name
                            </th>
                            <th class="px-6 py-4 font-bold text-lg text-gray-600 text-center rounded-t-xl">Email</th>
                            <th class="px-6 py-4 font-bold text-lg text-gray-600 text-center w-48 rounded-t-xl">Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody id="user-list" class="rounded-b-xl">
                    </tbody>
                </table>
                <div id="pagination-controls" class="flex items-center mt-10 gap-4">
                    <button id="prev"
                        class="w-auto font-bold px-4 py-2 bg-gray-600 text-white rounded-lg transition duration-300 hover:bg-gray-900 {{#if (lt currentPage totalPages)}}{{else}}bg-gray-300 cursor-not-allowed text-transparent{{/if}}">
                        Previous
                    </button>
                    <span id="current-page"
                        class="mx-auto w-auto font-bold px-10 py-2 bg-gray-600 text-white rounded-lg transition duration-300">
                        Page 1
                    </span>
                    <button id="next"
                        class="w-auto font-bold px-10 py-2 bg-gray-600 text-white rounded-lg transition duration-300 hover:bg-gray-900 {{#if (lt currentPage totalPages)}}{{else}}bg-gray-300 cursor-not-allowed text-transparent{{/if}}">
                        Next
                    </button>
                </div>
            </div>
        </main>
    </div>
    <div>
        {{> footer }}
    </div>
</div>

<script>
    const apiUrl = "/admin/users";

    function showLoading() {
        document.getElementById("loading").classList.remove("hidden");
    }

    function hideLoading() {
        document.getElementById("loading").classList.add("hidden");
    }

    function renderUsers(users) {
        const userList = document.getElementById("user-list");
        userList.innerHTML = "";
        users.forEach((user) => {
            const row = document.createElement("tr");
            row.className = "border-b hover:bg-gray-50 hover:rounded-xl";

            row.innerHTML = `
                <td class="px-6 py-3">
                    <img src="${user.image || 'default-avatar.png'}" alt="${user.firstName}" class="w-12 h-12 rounded-full object-cover border-2 border-indigo-400 mx-auto" />
                </td>
                <td class="px-6 py-3 text-gray-800 text-center">${user.lastName} ${user.firstName}</td>
                <td class="px-6 py-3 text-gray-500 text-center">${user.email}</td>
                <td class="px-6 py-3 mx-auto">
                    <div class="flex justify-center items-center mx-auto space-x-2">
                        <form action="/admin/users" method="GET" class="my-0 mb-0">
                            <input type="hidden" name="email" value="${user.email}" class="mx-auto"/>
                            <button type="submit" class="bg-blue-500 text-white px-3 py-2 rounded-lg hover:bg-blue-600 transition duration-800 font-bold mx-auto">
                                <i class="fas fa-eye"></i>
                            </button>
                        </form>
                        <form action="/admin/users" method="POST" class="my-0 mb-0">
                            <input type="hidden" name="email" value="${user.email}" class="mx-auto"/>
                            <button type="submit" class="bg-red-500 text-white px-3 py-2 rounded-lg hover:bg-red-600 transition duration-800 font-bold mx-auto">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </form>
                    </div>
                </td>
            `;
            userList.appendChild(row);
        });
    }

    function updatePaginationControls(currentPage, totalPages) {
        const prevButton = document.getElementById("prev");
        const nextButton = document.getElementById("next");
        document.getElementById("current-page").innerHTML = `Page ${currentPage}`;
        prevButton.disabled = currentPage === 1;
        nextButton.disabled = currentPage === totalPages;
        prevButton.style.cursor = prevButton.disabled ? "not-allowed" : "pointer";
        nextButton.style.cursor = nextButton.disabled ? "not-allowed" : "pointer";
        prevButton.style.backgroundColor = prevButton.disabled ? "transparent" : "";
        nextButton.style.backgroundColor = nextButton.disabled ? "transparent" : "";
        prevButton.style.color = prevButton.disabled ? "transparent" : "";
        nextButton.style.color = nextButton.disabled ? "transparent" : "";
    }


    function fetchPage(page = 1) {
        showLoading();
        fetch(`${apiUrl}?page=${page}`)
            .then((response) => {
                if (!response.ok) throw new Error("Error fetching data from server");
                return response.json();
            })
            .then((data) => {
                renderUsers(data.users);
                updatePaginationControls(data.currentPage, data.totalPages);
            })
            .catch((error) => console.error("Error:", error))
            .finally(() => hideLoading());
    }

    document.getElementById("prev").addEventListener("click", () => {
        const currentPage = parseInt(document.getElementById("current-page").innerText.split(" ")[1]);
        fetchPage(currentPage - 1);
    });

    document.getElementById("next").addEventListener("click", () => {
        const currentPage = parseInt(document.getElementById("current-page").innerText.split(" ")[1]);
        fetchPage(currentPage + 1);
    });

    fetchPage();
</script>