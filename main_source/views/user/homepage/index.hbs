{{> header }}

<main class="container mx-auto px-4 py-8">
    <h2 class="text-3xl font-semibold mb-6">Products</h2>

    <!-- Category Filter -->
    <div class="mb-4">
        <label for="category-filter" class="block text-sm font-medium text-gray-700">Category</label>
        <select id="category-filter"
            class="mt-1 block w-full pl-3 pr-10 py-2 text-base border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
            <option value="">All Categories</option>
            {{#each categories}}
            <option value="{{this}}">{{this}}</option>
            {{/each}}
        </select>
    </div>

    <!-- Price Filter -->
    <div class="mb-4">
        <label for="price-filter-min" class="block text-sm font-medium text-gray-700">Filter by Price</label>
        <div class="flex space-x-2 mt-1">
            <input id="price-filter-min" type="number" placeholder="Min Price" 
                class="w-1/2 pl-3 pr-10 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
            <input id="price-filter-max" type="number" placeholder="Max Price" 
                class="w-1/2 pl-3 pr-10 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
        </div>
        <button id="apply-price-filter" 
            class="mt-2 bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-700">
            Apply
        </button>
    </div>

    <!-- Products Grid -->
    <div id="products-container" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
        {{#each products}}
        <div class="w-full rounded-lg shadow-md bg-white overflow-hidden">
            <img src="{{this.image}}" alt="{{this.title}}" class="w-full h-48 object-cover">
            <div class="p-4">
                <h3 class="text-lg font-semibold text-gray-900">
                    {{this.title}}
                </h3>
                <p class="text-sm text-gray-600 mb-2">{{this.brand}} - {{this.model}}</p>
                <p class="text-gray-800 font-bold mb-4">${{this.price}}</p>
                <button id="view-details-{{this.id}}" class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-700"
                    data-product-id="{{this.id}}">
                    View Details
                </button>
            </div>
        </div>
        {{/each}}
    </div>

    <div id="pagination-container" class="flex justify-center mt-4">
        <!-- Pagination buttons will be dynamically added here -->
    </div>
</main>


<!-- Product Detail Modal -->
<div id="product-modal" class="bg-black bg-opacity-50 fixed inset-0 flex items-center justify-center z-50  hidden">
    <div class="bg-white rounded-lg shadow-lg w-1/3 p-4 relative">
        <button id="close-modal" class="absolute top-2 right-2 text-gray-700">&times;</button>
        <h2 id="product-title" class="text-xl font-semibold mb-4"></h2>
        <img id="product-image" src="" alt="" class="w-full h-48 object-cover mb-4">
        <p id="product-description" class="text-gray-600 mb-4"></p>
        <p id="product-price" class="text-gray-800 font-bold mb-4"></p>
        <div class="flex justify-between">
            <button id="add-to-cart" class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-700"
                data-product-id="">
                Add to Cart
            </button>
            <div class="mb-4">
                <label for="quantity-input" class="block text-sm font-medium text-gray-700">Quantity</label>
                <input type="number" id="quantity-input"
                    class="mt-1 block w-full pl-3 pr-10 py-2 text-base border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                    min="1" value="1" />
            </div>
        </div>
        <div class="mt-6">
            <h3 class="text-lg font-semibold mb-4">Related Products</h3>
            <div id="related-products" class="grid grid-cols-2 gap-4">
                <!-- Related products will be dynamically added here -->
            </div>
        </div>
    </div>
</div>


<script>
    // Fetch and render products
    async function fetchAndRenderProducts(url) {
        const productsContainer = document.getElementById('products-container');
        const paginationContainer = document.getElementById('pagination-container');

        productsContainer.innerHTML = '';
        paginationContainer.innerHTML = '';

        try {
            const response = await fetch(url);
            const data = await response.json();

            if (response.ok && data.products) {
                // Render products
                data.products.forEach(product => {
                    productsContainer.innerHTML += `
                        <div class="w-full rounded-lg shadow-md bg-white overflow-hidden">
                            <img src="${product.image}" alt="${product.title}" class="w-full h-48 object-cover">
                            <div class="p-4">
                                <h3 class="text-lg font-semibold text-gray-900">
                                    ${product.title}
                                </h3>
                                <p class="text-sm text-gray-600 mb-2">${product.brand} - ${product.model}</p>
                                <p class="text-gray-800 font-bold mb-4">$${product.price}</p>
                                <button 
                                    class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-700"
                                    data-product-id="${product._id}">
                                    View Details
                                </button>
                            </div>
                        </div>
                    `;
                });
                
                // Render pagination buttons
                for (let i = 1; i <= data.totalPages; i++) {
                    const isCurrentPage = i === Number(data.currentPage); // Convert currentPage to number

                    paginationContainer.innerHTML += `
                        <button 
                            class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mx-1 ${isCurrentPage ? 'opacity-50 cursor-not-allowed' : ''}" 
                            data-page="${i}" 
                            ${isCurrentPage ? 'disabled' : ''}>
                            ${i}
                        </button>
                    `;
                }


    // Add click event listeners to pagination buttons
            paginationContainer.querySelectorAll('button').forEach(button => {
                button.addEventListener('click', () => {
                    const selectedPage = button.getAttribute('data-page');
                    const baseUrl = url.split('?')[0]; // Extract base URL
                    const queryParams = new URLSearchParams(url.split('?')[1]); // Extract query parameters
                    queryParams.set('page', selectedPage); // Update the page number

                    fetchAndRenderProducts(`${baseUrl}?${queryParams.toString()}`);
                });
            });

                // Add event listeners to products
                addProductEventListeners();
            } else {
                productsContainer.innerHTML = '<p class="text-center text-gray-600">No products found.</p>';
            }
        } catch (error) {
            console.error('Error fetching products:', error);
            productsContainer.innerHTML = '<p class="text-center text-red-500">Failed to load products. Please try again.</p>';
        }
    }

    // Add click events to product buttons
    function addProductEventListeners() {
        document.querySelectorAll('[data-product-id]').forEach(button => {
            button.addEventListener('click', async (e) => {
                const productId = e.target.getAttribute('data-product-id');
                const response = await fetch(`/product/${productId}`);
                const product = await response.json();
                showProductModal(product);
            });
        });
    }

    async function showProductModal(product) {
        const modal = document.getElementById('product-modal');

        // Set product details
        document.getElementById('product-title').innerText = product.title;
        document.getElementById('product-image').src = product.image;
        document.getElementById('product-description').innerText = product.description;
        document.getElementById('product-price').innerText = `$${product.price}`;
        document.getElementById('add-to-cart').setAttribute('data-product-id', product._id); // Set product ID
        // Fetch related products
        const relatedProductsContainer = document.getElementById('related-products');
        //relatedProductsContainer.innerHTML = '<p class="text-center text-gray-600">Loading related products...</p>';
        try {
            const response = await fetch(`/product/category/${product.category}?limit=5`);
            const relatedProducts = await response.json();

            if (response.ok && relatedProducts.products.length > 0) {
                relatedProductsContainer.innerHTML = '';

                // Filter out the product with the same _id
                const filteredProducts = relatedProducts.products.filter(
                    (related) => related._id !== product._id
                );

                if (filteredProducts.length > 0) {
                    filteredProducts.forEach((related) => {
                        relatedProductsContainer.innerHTML += `
                            <div 
                                class="flex items-center justify-start space-x-2 cursor-pointer hover:bg-gray-100 p-2 rounded-lg"
                                data-product-id="${related._id}">
                                <img src="${related.image}" alt="${related.title}" class="w-20 h-20 object-cover">
                                <div>
                                    <h4 class="text-sm font-semibold">${related.title}</h4>
                                    <p class="text-sm text-gray-600">$${related.price}</p>
                                </div>
                            </div>
                        `;
                    });

                    relatedProductsContainer.querySelectorAll('[data-product-id]').forEach((relatedButton) => {
                        relatedButton.addEventListener('click', async (e) => {
                            const relatedProductId = e.target.closest('[data-product-id]').getAttribute('data-product-id');
                            const productUrl = `/product/${relatedProductId}`;
                            const response = await fetch(productUrl);
                            const product = await response.json();
                            showProductModal(product);
                        });
                    });
                } else {
                    relatedProductsContainer.innerHTML = '<p>No related products found.</p>';
                }
            }
        } catch (error) {
            console.error('Error fetching related products:', error);
            relatedProductsContainer.innerHTML = '<p class="text-center text-red-500">Failed to load related products.</p>';
        }

        modal.classList.remove('hidden');
    }

    // Handle Add-to-Cart button click
    document.getElementById('add-to-cart').addEventListener('click', () => {
        event.preventDefault(); 
        const productId = document.getElementById('add-to-cart').getAttribute('data-product-id');
        const quantityInput = document.getElementById('quantity-input');
        const quantity = parseInt(quantityInput.value, 10);

        if (!isNaN(quantity) && quantity > 0) {
            addToCart(productId, quantity);
        } else {
            alert('Please enter a valid quantity.');
        }
    });

    // Add items to cart
    function addToCart(productId, quantity) {
        let cart = getCartFromCookie();
        const existingItem = cart.find(item => item.id === productId);

        if (existingItem) {
            existingItem.quantity += quantity;
        } else {
            cart.push({ id: productId, quantity });
        }

        saveCartToCookie(cart);

        const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
        alert(`You now have ${totalItems} item(s) in your cart.`);
    }

    // Helper: Get cart from cookies
    function getCartFromCookie() {
        const cart = document.cookie.split('; ').find(row => row.startsWith('cart='));
        return cart ? JSON.parse(decodeURIComponent(cart.split('=')[1])) : [];
    }

    // Helper: Save cart to cookies
    function saveCartToCookie(cart) {
        document.cookie = `cart=${encodeURIComponent(JSON.stringify(cart))}; path=/`;
    }

    // Initialize product display with default filters
    fetchAndRenderProducts('/product?page=1');
</script>
