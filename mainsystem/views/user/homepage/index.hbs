<div id="banner_modal" class="fixed inset-0 flex justify-center items-center bg-black bg-opacity-50 z-50">
    <div class="p-6 rounded-2xl shadow-lg" id="banner_img">
        <div id="image_container" class="container flex items-center justify-center">

        </div>
    </div>
</div>

{{> header }}

<main id="main-content" class="container m-0 w-full flex flex-wrap lg:flex-nowrap justify-between">
    <!-- Sidebar Section -->
    <aside class="w-1/5 mb-6 lg:mb-0">
        <div class="bg-gray-100 shadow-md py-4 px-3 sticky top-[110px]">
            <div class="mb-6">
                <h2 class="text-sm font-semibold text-black mb-2">Filter by Price</h2>
                <div class="flex space-x-2">
                    <input id="price-filter-min" type="number" placeholder="Min"
                        class="w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 text-sm">
                    <input id="price-filter-max" type="number" placeholder="Max"
                        class="w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 text-sm">
                </div>
            </div>

            <div class="mb-6">
                <h2 class="text-sm font-semibold text-black mb-2">Filter by Discount</h2>
                <input id="discount-filter" type="number" placeholder="Min Discount (%)"
                    class="w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 text-sm">
            </div>

            <div class="mt-4">
                <button id="apply-price-filter"
                    class="w-full bg-green-400 text-white py-2 rounded-md font-medium hover:bg-green-600 transition duration-300">
                    Apply Filter
                </button>
            </div>
        </div>
    </aside>

    <!-- Main Content Section -->
    <section class="w-4/5 p-6 bg-white flex flex-col">
        <header class="mb-6" id="mainheader">
            <h2 class="flex bg-[#274354] p-4 rounded-2xl text-3xl font-bold text-white justify-center items-center">
                <span>List Of Products</span>
            </h2>
        </header>

        <div id="products-container" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            <!-- Product items -->
        </div>

        <footer id="pagination-container" class="flex justify-center items-center space-x-4 mt-8">
            <button id="prev-button" class="bg-gray-500 text-white py-2 px-4 rounded-md hover:bg-gray-700" disabled>
                Previous
            </button>
            <select id="page-dropdown" class="py-2 px-4 border rounded-md focus:ring-2 focus:ring-blue-500">
            </select>
            <button id="next-button" class="bg-gray-500 text-white py-2 px-4 rounded-md hover:bg-gray-700">
                Next
            </button>
        </footer>
    </section>
</main>

<div class="fixed bottom-4 left-6">
    <img src="/system_images/user_aside.gif" alt="sale_banner" class="h-48">
</div>'
<a href="/cart" class=" no-underline hover:no-underline">
    <div
        class="fixed bottom-4 right-6 bg-white text-white rounded-full p-3 shadow-lg flex items-center justify-center border-[1px] border-gray-600 opacity-60 hover:opacity-100">
        <img src="/system_images/shopping-cart.gif" class="h-12">
    </div>
</a>
<!-- Product Detail Modal -->
<div id="product-modal" class="bg-black bg-opacity-50 fixed inset-0 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg shadow-lg w-full max-w-4xl p-6 relative animate-fade-in overflow-auto max-h-[90vh]">
        <button id="close-modal"
            class="absolute top-4 right-4 text-gray-700 text-2xl hover:text-red-500 transition-colors">
            &times;
        </button>
        <div class="flex flex-col gap-6">
            <!-- Product Details -->
            <div class="w-full">
                <h2 id="product-title" class="text-2xl font-semibold mb-4 truncate"></h2>
                <img id="product-image" src="" alt="" class="w-full h-64 object-cover mb-4 rounded">
                <p id="product-description" class="text-gray-600 mb-4"></p>
                <p id="product-price" class="text-gray-800 font-bold mb-4"></p>
                <p id="product-stock" class="text-sm text-gray-600 mb-4">
                    <strong>Stock Quantity:</strong> <span class="text-gray-900" id="stock-quantity"></span>
                </p>
                <div class="flex justify-between items-center">
                    <button id="add-to-cart"
                        class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-700 transition-all duration-300 transform hover:scale-105"
                        data-product-id="{{this.id}}" data-price="{{this.price}}" data-stock="{{this.stock_quantity}}"
                        data-discount-price="{{calculateDiscountPrice this.price this.discount}}">
                        Add to Cart <i class="fas fa-cart-plus"></i>
                    </button>
                    <div>
                        <label for="quantity-input" class="block text-sm font-medium text-gray-700">Quantity</label>
                        <input type="number" id="quantity-input"
                            class="mt-1 block w-20 pl-3 pr-10 py-2 text-base border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                            min="1" value="1" />
                    </div>
                </div>
            </div>
            <!-- Related Products -->
            <div class="w-full">
                <h3 class="text-lg font-semibold mb-4">Related Products</h3>
                <div id="related-products" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    <!-- Related products will be dynamically added here -->
                </div>
            </div>
        </div>
    </div>
</div>

<script src="/js/user/homepage.js"></script>

<script>

    const header = document.getElementById('mainheader');
    const main = document.getElementById('main-content');
    const headerHeight = header.offsetHeight;
    main.style.marginTop = `${headerHeight}px`;
    main.style.marginLeft = '0px';
    main.style.marginRight = '0px';
    main.style.marginBottom = '0px';

    let currentModalProductId = null;
    let currentCategory = null;
    // Fetch and render products
    async function fetchAndRenderProducts(url) {
        const productsContainer = document.getElementById('products-container');
        const paginationContainer = document.getElementById('pagination-container');

        productsContainer.innerHTML = '';
        paginationContainer.innerHTML = '';

        try {
            const response = await fetch(url);
            const data = await response.json();

            if (response.ok && data.products && data.products.length) {
                const currentPage = parseInt(data.currentPage, 10); // Parse currentPage as an integer
                const totalPages = data.totalPages;

                // Render products
                data.products.forEach(product => {
                    const discount = product.discount || 0; // Default discount is 0 if not provided
                    const discountedPrice = (product.price - (product.price * discount / 100)).toFixed(2); // Calculate discounted price

                    productsContainer.innerHTML += `
                        <div class="w-full rounded-xl shadow-lg bg-white overflow-hidden transform transition-all hover:scale-105 hover:shadow-xl">
                            <div class="relative">
                                <img src="${product.image}" alt="${product.title}" class="w-full h-48 object-cover rounded-t-lg">
                                ${discount > 0
                            ? `<div class="absolute top-2 left-2 bg-red-500 text-white text-xs font-bold py-1 px-2 rounded-md">
                                        ${discount}% OFF
                                    </div>`
                            : ''}
                            </div>
                            <div class="p-6">
                                <h3 class="text-lg font-semibold text-gray-900 truncate flex items-center gap-1">
                                    ${product.title}
                                </h3>
                                ${product.brand ? `<p class="text-sm text-gray-600 mb-2">${product.brand}</p>` : ''}
                                <div class="flex justify-between items-center">
                                    <div>
                                        <p class="text-lg font-bold text-gray-900">$${discountedPrice}</p>
                                        ${discount > 0
                            ? `<p class="text-sm line-through text-gray-500">$${product.price}</p>`
                            : ''}
                                    </div>
                                    <button class="font-semibold bg-blue-500 text-white py-2 px-3 rounded-md hover:bg-blue-700 transition duration-300 transform hover:scale-105"
                                            data-product-id="${product._id}">
                                        View
                                    </button>
                                </div>
                            </div>
                        </div>
                    `;
                });

                // Render pagination
                paginationContainer.innerHTML = `
                <button 
                    class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mx-1 ${currentPage === 1 ? 'opacity-50 cursor-not-allowed' : ''}" 
                    ${currentPage === 1 ? 'disabled' : ''} 
                    data-page="${currentPage - 1}">
                    Previous
                </button>
                <select id="pagination-dropdown" class="border border-gray-300 rounded py-2 px-4 mx-2">
                    ${Array.from({ length: totalPages }, (_, i) => `
                        <option value="${i + 1}" ${i + 1 === currentPage ? 'selected' : ''}>
                            Page ${i + 1}
                        </option>
                    `).join('')}
                </select>
                <button 
                    class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mx-1 ${currentPage === totalPages ? 'opacity-50 cursor-not-allowed' : ''}" 
                    ${currentPage === totalPages ? 'disabled' : ''} 
                    data-page="${currentPage + 1}">
                    Next
                </button>
            `;

                // Add click event listeners to pagination buttons
                paginationContainer.querySelectorAll('button').forEach(button => {
                    button.addEventListener('click', () => {
                        const selectedPage = button.getAttribute('data-page');
                        const baseUrl = url.split('?')[0];
                        const queryParams = new URLSearchParams(url.split('?')[1]);
                        queryParams.set('page', selectedPage);
                        fetchAndRenderProducts(`${baseUrl}?${queryParams.toString()}`);
                    });
                });

                const paginationDropdown = document.getElementById('pagination-dropdown');
                paginationDropdown.addEventListener('change', (e) => {
                    const selectedPage = e.target.value;
                    const baseUrl = url.split('?')[0];
                    const queryParams = new URLSearchParams(url.split('?')[1]);
                    queryParams.set('page', selectedPage);
                    fetchAndRenderProducts(`${baseUrl}?${queryParams.toString()}`);
                });

                // Add event listeners to products
                addProductEventListeners();
            } else {
                productsContainer.innerHTML = '<p class="text-center text-gray-600">No products found.</p>';
            }
        } catch (error) {
            console.error('Error fetching products:', error);
            productsContainer.innerHTML = '<p class="text-center text-red-500">Failed to load products. Please try again.</p>';
        }
    }

    // Add click events to product buttons
    function addProductEventListeners() {
        document.querySelectorAll('[data-product-id]').forEach(button => {
            button.addEventListener('click', async (e) => {
                const productElement = e.target.closest('[data-product-id]');
                if (!productElement) return;
                const productId = productElement.getAttribute('data-product-id');
                try {
                    const response = await fetch(`/product/${productId}`);
                    if (!response.ok) throw new Error('Failed to fetch product details');
                    const product = await response.json();
                    showProductModal(product);
                } catch (error) {
                    console.error('Error fetching product details:', error);
                    alert('Failed to load product details. Please try again later.');
                }
            });
        });
    }

    async function showProductModal(product) {
        const modal = document.getElementById('product-modal');
        if (currentModalProductId === product._id) {
            return;
        }
        currentModalProductId = product._id;
        const discount = product.discount || 0;
        const discountedPrice = (product.price - (product.price * discount / 100)).toFixed(2);
        // Set product details
        document.getElementById('product-title').innerText = product.title;
        document.getElementById('product-image').src = product.image;
        document.getElementById('product-description').innerText = product.description;
        const priceContainer = document.getElementById('product-price');
        if (discount > 0) {
            priceContainer.innerHTML = `
                <p class="text-lg font-bold text-gray-900">$${discountedPrice}</p>
                <p class="text-sm line-through text-gray-500">$${product.price}</p>
            `;
        } else {
            priceContainer.innerHTML = `<p class="text-lg font-bold text-gray-900">$${product.price}</p>`;
        }
        document.getElementById('quantity-input').value = 1;
        document.getElementById('add-to-cart').setAttribute('data-product-id', product._id); // Set product ID
        document.getElementById('add-to-cart').setAttribute('data-price', product.price);
        document.getElementById('add-to-cart').setAttribute('data-stock', product.stock_quantity);
        document.getElementById('add-to-cart').setAttribute('data-discount-price', discountedPrice);
        document.getElementById("stock-quantity").innerText = product.stock_quantity;
        // Fetch related products
        const relatedProductsContainer = document.getElementById('related-products');
        //relatedProductsContainer.innerHTML = '<p class="text-center text-gray-600">Loading related products...</p>';
        try {
            const response = await fetch(`/product/category/${product.category}?limit=5`);
            const relatedProducts = await response.json();

            if (response.ok && relatedProducts.products.length > 0) {
                relatedProductsContainer.innerHTML = '';

                // Filter out the product with the same _id
                const filteredProducts = relatedProducts.products.filter(
                    (related) => related._id !== product._id
                ).slice(0, 4);

                if (filteredProducts.length > 0) {
                    filteredProducts.forEach((related) => {
                        const relatedDiscount = related.discount || 0;
                        const relatedDiscountedPrice = (related.price - (related.price * relatedDiscount / 100)).toFixed(2);
                        relatedProductsContainer.innerHTML += `
                            <div 
                                class="flex items-center justify-start space-x-2 cursor-pointer hover:bg-gray-100 p-2 rounded-lg"
                                data-product-id="${related._id}">
                                <img src="${related.image}" alt="${related.title}" class="w-20 h-20 object-cover">
                                <div>
                                    <h4 class="text-sm font-semibold">${related.title}</h4>
                                    ${relatedDiscount > 0 ? `<p class="text-sm font-bold text-gray-900">$${relatedDiscountedPrice}</p>
                                    <p class="text-sm line-through text-gray-500">$${related.price}</p>`
                                : `<p class="text-sm text-gray-900">$${related.price}</p>`}
                                </div>
                            </div>
                        `;
                    });

                    relatedProductsContainer.querySelectorAll('[data-product-id]').forEach((relatedButton) => {
                        relatedButton.addEventListener('click', async (e) => {
                            const relatedProductId = e.target.closest('[data-product-id]').getAttribute('data-product-id');
                            const productUrl = `/product/${relatedProductId}`;
                            const response = await fetch(productUrl);
                            const product = await response.json();
                            showProductModal(product);
                        });
                    });
                } else {
                    relatedProductsContainer.innerHTML = '<p>No related products found.</p>';
                }
            }
        } catch (error) {
            console.error('Error fetching related products:', error);
            relatedProductsContainer.innerHTML = '<p class="text-center text-red-500">Failed to load related products.</p>';
        }

        modal.classList.remove('hidden');
    }

    // Handle Add-to-Cart button click
    document.getElementById('add-to-cart').addEventListener('click', () => {
        event.preventDefault();
        const productId = document.getElementById('add-to-cart').getAttribute('data-product-id');
        const quantityInput = document.getElementById('quantity-input');
        const quantity = parseInt(quantityInput.value, 10);
        const price = document.getElementById('add-to-cart').getAttribute('data-price');
        const discountedPrice = document.getElementById('add-to-cart').getAttribute('data-discount-price');
        const stockQuantity = document.getElementById('add-to-cart').getAttribute('data-stock');
        if (!isNaN(quantity) && quantity > 0) {
            if (quantity > stockQuantity) {
                alert('Quantity exceeds stock quantity.');
            }
            else {
                addToCart(productId, quantity, discountedPrice);
            }
        } else {
            alert('Please enter a valid quantity.');
        }
    });

    // Add items to cart
    function addToCart(productId, quantity, price) {
        let cart = getCartFromCookie();
        const existingItem = cart.find(item => item.id === productId);

        if (existingItem) {
            existingItem.quantity += quantity;
        } else {
            cart.push({ id: productId, quantity, price });
        }

        saveCartToCookie(cart);

        const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
        alert(`You now have ${totalItems} item(s) in your cart.`);
    }

    // Helper: Get cart from cookies
    function getCartFromCookie() {
        const cart = document.cookie.split('; ').find(row => row.startsWith('cart='));
        return cart ? JSON.parse(decodeURIComponent(cart.split('=')[1])) : [];
    }

    // Helper: Save cart to cookies
    function saveCartToCookie(cart) {
        document.cookie = `cart=${encodeURIComponent(JSON.stringify(cart))}; path=/`;
    }

    // Close modal when clicking the close button
    document.getElementById('close-modal').addEventListener('click', () => {
        document.getElementById('product-modal').classList.add('hidden');
        isModalVisible = false;
    });

    // Apply category filter
    document.querySelectorAll('#category-dropdown li').forEach(item => {
        item.addEventListener('click', function () {
            const category = this.getAttribute('data-value'); // Get the selected value
            currentCategory = category;
            // Fetch other filter values
            const minPrice = document.getElementById('price-filter-min').value || 0;
            const maxPrice = document.getElementById('price-filter-max').value || 1000000;
            const minDiscount = document.getElementById('discount-filter').value || 0;

            // Build the URL and trigger fetch
            const url = `/product/price?category=${category}&min=${minPrice}&max=${maxPrice}&minDiscount=${minDiscount}&page=1&limit=8`;
            fetchAndRenderProducts(url);
        });
    });
    // Fetch all products
    document.getElementById('category-trigger').addEventListener('click', function () {
        const minPrice = document.getElementById('price-filter-min').value || 0;
        const maxPrice = document.getElementById('price-filter-max').value || 1000000;
        const minDiscount = document.getElementById('discount-filter').value || 0;
        const url = `/product/price?min=${minPrice}&max=${maxPrice}&minDiscount=${minDiscount}&page=1&limit=8`; // Adjust endpoint as needed

        fetchAndRenderProducts(url);
    });

    // Apply price filter
    document.getElementById('apply-price-filter').addEventListener('click', function () {
        const minPrice = document.getElementById('price-filter-min').value || 0;
        const maxPrice = document.getElementById('price-filter-max').value || 1000000;
        const minDiscount = document.getElementById('discount-filter').value || 0;

        const category = currentCategory || '';
        const url = `/product/price?category=${category}&min=${minPrice}&max=${maxPrice}&minDiscount=${minDiscount}&page=1`;
        fetchAndRenderProducts(url);
    });

    // Handle search input changes
    document.getElementById('search-input').addEventListener('change', function () {
        const searchTerm = this.value.trim();
        let url = '/product/search/title=' + searchTerm + '?page=1';  // Search query for title

        if (searchTerm) {
            fetchAndRenderProducts(url);
        } else {
            fetchAndRenderProducts('/product?page=1'); // If search term is cleared, show all products
        }
    });
    // Initialize product display with default filters
    fetchAndRenderProducts('/product?page=1');
</script>